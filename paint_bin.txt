020 000 000 000     INIT
002 010 000 000     LAST_X
002 011 000 000     LAST_Y
002 012 000 000     DPAD
002 013 000 000     X
002 014 000 000     Y
002 015 000 077     COLOR
002 016 000 000     PICK COLOR
002 017 000 000     PLACE COLOR
002 020 000 000     CLOCK
002 021 000 000     CLOCK XOR
002 024 000 000     Set MEM_HI
023 000 020 024
022 013 000 000     Jump to serial intro

020 016 000 000     DRAW PALLETE
002 013 000 000     X = 0
023 000 026 000     SET SCREEN Y = 0
020 016 001 000     PALLETE X LOOP
023 000 021 013     MEM_MID = X
023 000 022 000     MEM_LO = 0
023 000 025 013     SET SCREEN X
023 000 027 013     DRAW COLOR
023 000 024 013     WRITE MEM
002 013 013 001     X++
004 023 013 000     IF X != 0
046 016 001 000         JUP PALLETE X LOOP
002 014 000 001     Y = 0

020 012 012 000     Wait for input change REMOVED FOR BLINK 023 011 030 000 004 002 011 012 046 014 000 000

020 012 013 000     READ INPUTS
001 010 000 013     LAST_X = X
001 011 000 014     LAST_Y = Y
023 012 030 000
012 016 012 040     X(PICK)

012 017 012 020     Y(PLACE)

012 001 012 010     Up
004 022 001 010
027 014 014 077

012 001 012 004     Down
004 022 001 004
027 014 014 001

012 001 012 002     Left
004 022 001 002
027 013 013 077

012 001 012 001     Right
004 022 001 001
027 013 013 001

020 012 014 000     WAIT FOR NO INPUT
023 001 030 000
012 001 001 057     BITMASK TO REMOVE Y (PLACE)
004 023 001 000
046 012 014 000

020 016 002 000     HAVE WE MOVED
023 020 004 000     GET CLOCK HI
012 020 020 001     GET LSB CLOCK
004 003 010 013     X MOVED
047 016 003 000         Jump to RESET LAST PIXEL
004 003 011 014     Y MOVED
047 016 003 000         Jump to RESET LAST PIXEL
004 003 020 021     IF 2ndLSB CLOCK SET
047 016 003 000         Jump to RESET LAST PIXEL
022 016 004 000     Jump to DRAW TEMP COLOR

020 016 003 000     RESET LAST PIXEL
023 000 025 010     SET X
023 000 026 011     SET Y
023 000 021 010     SET MEM_MID
023 000 022 011     SET MEM_LO
023 001 023 000     READ FROM MEM
023 000 027 001     DRAW COLOR
004 003 010 013     X MOVED
026 021 000 020         CLOCK_XOR = CLOCK
046 016 004 000         Jump to DRAW TEMP COLOR
004 003 011 014     Y MOVED
026 021 000 020         CLOCK_XOR = CLOCK
046 016 004 000         Jump to DRAW TEMP COLOR
022 016 005 000     Jump to PICK

020 016 004 000     DRAW TEMP COLOR
023 000 025 013     SET X
023 000 026 014     SET Y
023 000 027 015     DRAW COLOR

020 016 005 000     PICK
004 022 016 000     IF PICK NOT PRESSED
047 016 006 000         Jump to PLACE
023 000 021 013     SET MEM_MID
023 000 022 014     SET MEM_LO
023 015 023 000     READ FROM MEM INTO COLOR

020 016 006 000     PLACE
004 022 017 000     IF PLACE NOT PRESSED
047 014 000 000         Jump to CHECK SERIAL

020 012 015 000     CHANGE PIXEL
004 022 014 000     IF Y = 0
047 014 000 000         Jump to CHECK SERIAL
023 000 025 013     SET X
023 000 026 014     SET Y
023 000 027 015     DRAW COLOR
023 000 020 000     MEM_HI = 0
023 000 021 013     SET MEM_MID
023 000 022 014     SET MEM_LO
023 000 024 015     WRITE COLOR TO MEM

020 014 000 000     CHECK SERIAL
023 001 000 000     GET SERIAL BUFFER
004 022 001 000     IF BUF = 0
046 012 012 000         Jump to wait input
023 001 001 000     GET BYTE
004 023 001 076     IF BYTE != 042 [ENTER]
046 012 012 000         Jump to wait input

020 014 003 000     CLEAR BUFFER BEFORE
023 001 000 000     GET SERIAL BUFFER
004 023 001 000     IF BUF != 0
050 000 001 000         GET BYTE
046 014 003 000         JUP CLEAR BUFFER BEFORE
022 013 001 000     Jump to confirm message

020 014 001 000     SERIAL CONFIRM
023 001 000 000     GET SERIAL BUFFER
004 022 001 000     IF BUF = 0
046 014 001 000         JUP SERIAL CONFIRM
023 001 001 000     GET BYTE
004 022 001 042     IF BYTE = 042
047 015 000 000         JUP UPLOAD

020 014 002 000     CLEAR BUFFER BEFORE
023 001 000 000     GET SERIAL BUFFER
004 023 001 000     IF BUF != 0
050 000 001 000         GET BYTE
046 014 002 000         JUP CLEAR BUFFER
022 013 002 000     Jump to cancelled 

020 015 000 000     UPLOAD
023 000 020 000     MEM_HI = 0
023 000 021 000     MEM_MID = 0
002 001 000 001     TEMP = 1
023 000 022 001     MEM_LO = 1 (TEMP)
002 013 000 000     X = 0
020 015 001 000     X LOOP
002 014 000 001     Y = 1
020 015 002 000     Y LOOP
023 001 023 000     READ FROM MEM
023 000 012 001     SEND OVER NET
002 014 014 001     Y++
004 023 014 000     IF Y != 0
046 015 002 000         JUP Y LOOP
023 001 023 000     REMOVE NEXT FIRST ROW
002 013 013 001     X++
004 023 013 000     IF X != 0
046 015 001 000         JUP X LOOP

020 015 003 000     NET RESPONSE
023 001 010 000     GET NET BUFFER
004 022 001 000     IF BUF = 0
046 015 003 000         JUP NET RESPONSE
023 001 011 000     GET BYTE
004 023 001 077     IF BYTE != 63
050 000 002 001         PRINT BYTE
046 015 003 000         JUP NET RESPONSE
000 000 000 000     HALT

020 013 000 000     SERIAL INTRO
002 070 000 041     X
023 000 002 070
002 070 000 046     -
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 042     Y
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 015     D
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 031     P
023 000 002 070
023 000 002 070     P
002 070 000 016     E
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 073     ,
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 042     Y
023 000 002 070
002 070 000 046     -
023 000 002 070
002 070 000 015     D
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 040     W
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 014     C
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 025     L
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 076     \n
023 000 002 070

002 070 000 031     P
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 034     S
023 000 002 070 
023 000 002 070     S
002 070 000 044     SP
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 027     N
023 000 002 070
002 070 000 035     T
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 035     T
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 036     U
023 000 002 070
002 070 000 031     P
023 000 002 070
002 070 000 025     L
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 015     D
023 000 002 070
002 070 000 076     \n
023 000 002 070
021 016 000 000     Jump to draw pallete

020 013 001 000     SERIAL CONFIRM TEXT
002 070 000 035     T
023 000 002 070
002 070 000 021     H
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 031     P
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 020     G
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 026     M
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 040     W
023 000 002 070
002 070 000 022     I
023 000 002 070
002 070 000 025     L
023 000 002 070
002 070 000 025     L
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 021     H
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 025     L
023 000 002 070
002 070 000 035     T
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 017     F
023 000 002 070
002 070 000 035     T
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 036     U
023 000 002 070
002 070 000 031     P
023 000 002 070
002 070 000 025     L
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 015     D
023 000 002 070
002 070 000 076     \n
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 042     Y
023 000 002 070
002 070 000 030     O
023 000 002 070
002 070 000 036     U
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 034     S
023 000 002 070 
002 070 000 036     U
023 000 002 070
002 070 000 033     R
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 044     SP
023 000 002 070
002 070 000 056     [
023 000 002 070
002 070 000 042     Y
023 000 002 070
002 070 000 057     ]
023 000 002 070
002 070 000 076     \n
023 000 002 070
021 014 001 000     Jump to serial confirm

020 013 002 000     SERIAL CONFIRM TEXT
002 070 000 014     C
023 000 002 070
002 070 000 012     A
023 000 002 070
002 070 000 027     N
023 000 002 070
002 070 000 014     C
023 000 002 070
002 070 000 016     E
023 000 002 070
002 070 000 025     L
023 000 002 070
023 000 002 070     L
002 070 000 016     E
023 000 002 070
002 070 000 015     D
023 000 002 070
002 070 000 076     \n
023 000 002 070
021 012 012 000     Jump to wait input